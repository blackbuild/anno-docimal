plugins {
    id "java-library"
    id 'groovy'
    id 'signing'
    id 'com.github.hierynomus.license'
    id 'maven-publish'
}

group rootProject.group

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(11)
    }
    withJavadocJar()
    withSourcesJar()
}

tasks.withType(JavaCompile).configureEach {
    options.compilerArgs << '-parameters'
}

dependencies {
    compileOnly libs.jb.anno
    compileOnly libs.groovy.v3

    testImplementation libs.jb.anno

    testRuntimeOnly libs.bundles.spockRuntime
    testRuntimeOnly libs.jpl
}

afterEvaluate {
    signing {
        required { gradle.taskGraph.hasTask("publish") || gradle.taskGraph.hasTask("publishToMavenLocal") }
        publishing.publications.configureEach {
            sign it
        }
    }
}

publishing.publications.configureEach {
    pom { pom ->
        project.getName()
        pom.name = project.name
        pom.description = project.description

        pom.url = 'https://github.com/blackbuild/anno-docimal.git'

        pom.scm {
            url = 'https://github.com/blackbuild/anno-docimal.git'
            connection = 'scm:git:https://github.com/blackbuild/anno-docimal.git'
            developerConnection = 'scm:git:https://github.com/blackbuild/anno-docimal.git'
        }

        pom.licenses {
            license {
                name = 'MIT License (MIT)'
                url = 'https://opensource.org/licenses/MIT'
                distribution = 'repo'
            }
        }

        pom.developers {
            developer {
                id = 'pauxus'
                name = 'Stephan Pauxberger'
                email = 'stephan@blackbuild.com'
                url = 'https://github.com/pauxus'
            }
        }
    }
}



license {
    header = rootProject.file("LICENSE")
    mapping("java", "SLASHSTAR_STYLE")
    mapping("groovy", "SLASHSTAR_STYLE")
    mapping("gdsl", "SLASHSTAR_STYLE")
    exclude("mockup/**")
    exclude("**/META-INF/services/*")
    strictCheck(true)
}

if (rootProject.ext.groovyVersion != "v2")
    test {
        useJUnitPlatform()
    }
