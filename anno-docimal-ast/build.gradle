plugins {
    id 'java-library'
    id 'nebula.maven-publish'
    id 'nebula.javadoc-jar'
    id 'nebula.source-jar'
    id 'nebula.release'
    id 'nebula.contacts'
// id'nebula.info'
    id 'groovy'
    id 'jacoco'
    id 'signing'
    id 'com.github.hierynomus.license'
}

description "compileOnly part of AnnoDocimal"

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(11)
    }
}

jacoco {
    toolVersion = "0.8.2"
}

group 'com.blackbuild.annodocimal'

dependencies {
    // all dependencies are compile time dependencies (for AST "runtime" is compile time of a client project")
    api project(':anno-docimal-annotations')

    testImplementation "org.jetbrains:annotations:16.0.2"

    compileOnly "org.jetbrains:annotations:16.0.2"
    compileOnly "org.codehaus.groovy:groovy-all:2.4.21"

    //compileOnly "com.intellij:openapi:7.0.3"

    if (rootProject.ext.groovyVersion.startsWith("2.")) {
        testImplementation "org.codehaus.groovy:groovy-all:$rootProject.ext.groovyVersion"
        testImplementation("org.spockframework:spock-core:1.3-groovy-2.4")
    } else if (rootProject.ext.groovyVersion.startsWith("3.")) {
        testImplementation "org.codehaus.groovy:groovy-all:$rootProject.ext.groovyVersion"
        testImplementation("org.spockframework:spock-core:2.3-groovy-3.0")
        testImplementation("org.spockframework:spock-junit4:2.3-groovy-3.0")
    } else if (rootProject.ext.groovyVersion.startsWith("4.")) {
        testImplementation "org.apache.groovy:groovy-all:$rootProject.ext.groovyVersion"
        testImplementation("org.spockframework:spock-core:2.3-groovy-4.0")
        testImplementation("org.spockframework:spock-junit4:2.3-groovy-4.0")
    } else {
        throw new IllegalStateException("Unsupported Groovy version ${rootProject.ext.groovyVersion}")
    }

    testRuntimeOnly "net.bytebuddy:byte-buddy:1.9.3"
    testRuntimeOnly "org.objenesis:objenesis:2.6"

}
test {
    if (!rootProject.ext.groovyVersion.startsWith("2."))
        useJUnitPlatform()
}
contacts {
    'stephan@blackbuild.com' {
        moniker 'Stephan Pauxberger'
        github 'pauxus'
    }
}

publishing {
    publications {
        nebula(MavenPublication) {
            suppressPomMetadataWarningsFor('testFixturesApiElements')
            suppressPomMetadataWarningsFor('testFixturesRuntimeElements')
            pom {
                url = "https://github.com/blackbuild/anno-docimal"
                licenses {
                    license {
                        name = 'The MIT License (MIT)'
                        url = 'http://opensource.org/licenses/MIT'
                    }
                }
                scm {
                    connection = 'scm:git:git@github.com:blackbuild/anno-docimal.git'
                    developerConnection = 'scm:git:git@github.com:blackbuild/anno-docimal.git'
                    url = 'https://github.com/blackbuild/anno-docimal'
                }
            }
        }
    }
}

signing {
    required { gradle.taskGraph.hasTask("publish") || gradle.taskGraph.hasTask("publishToMavenLocal") }
    sign publishing.publications.nebula
}

license {
    header = rootProject.file("LICENSE")
    mapping("java", "SLASHSTAR_STYLE")
    mapping("groovy", "SLASHSTAR_STYLE")
    mapping("gdsl", "SLASHSTAR_STYLE")
    exclude("mockup/**")
    strictCheck(true)
}


