plugins {
    id 'com.gradle.plugin-publish'
    id 'java-gradle-plugin'
    id 'groovy'
    id 'jacoco'
    id 'signing'
    id 'com.github.hierynomus.license'
    id 'maven-publish'
}

description "AnnoDocimal Stub Generator Gradle Plugin"

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(11)
    }
}

gradlePlugin {

    plugins {
        annoDocimalPlugin {
            id = 'com.blackbuild.annodocimal.plugin'
            displayName = 'AnnoDocimal Plugin'
            description = 'Create Javadocs for generated code'
            implementationClass = 'com.blackbuild.annodocimal.plugin.AnnoDocimalPlugin'
            tags.addAll 'testing', 'groovy', 'cps', 'jenkins'
        }
    }

    website = 'https://github.com/blackbuild/anno-docimal'
    vcsUrl = 'https://github.com/blackbuild/anno-docimal.git'
    description = project.description

}

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(11))
    }
}

jacoco {
    toolVersion = "0.8.11"
}

group rootProject.group

dependencies {
    // all dependencies are compile time dependencies (for AST "runtime" is compile time of a client project")
    api project(':anno-docimal-generator')
    testImplementation "org.jetbrains:annotations:16.0.2"

    compileOnly "org.jetbrains:annotations:16.0.2"

    if (rootProject.ext.groovyVersion.startsWith("2.")) {
        testImplementation "org.codehaus.groovy:groovy-all:$rootProject.ext.groovyVersion"
        testImplementation("org.spockframework:spock-core:1.3-groovy-2.4")
    } else if (rootProject.ext.groovyVersion.startsWith("3.")) {
        testImplementation "org.codehaus.groovy:groovy-all:$rootProject.ext.groovyVersion"
        testImplementation("org.spockframework:spock-core:2.3-groovy-3.0")
        testImplementation("org.spockframework:spock-junit4:2.3-groovy-3.0")
    } else if (rootProject.ext.groovyVersion.startsWith("4.")) {
        testImplementation "org.apache.groovy:groovy-all:$rootProject.ext.groovyVersion"
        testImplementation("org.spockframework:spock-core:2.3-groovy-4.0")
        testImplementation("org.spockframework:spock-junit4:2.3-groovy-4.0")
    } else {
        throw new IllegalStateException("Unsupported Groovy version ${rootProject.ext.groovyVersion}")
    }

    testRuntimeOnly "net.bytebuddy:byte-buddy:1.9.3"
    testRuntimeOnly "org.objenesis:objenesis:2.6"

}
test {
    if (!rootProject.ext.groovyVersion.startsWith("2."))
        useJUnitPlatform()
}

publishing {
    publications {
        pluginMaven(MavenPublication)
    }
    publications.configureEach { publication ->
        publication.pom { pom ->
            rootProject.configurePom(pom, project)
        }
    }
}

signing {
    required { gradle.taskGraph.hasTask("publish") || gradle.taskGraph.hasTask("publishToMavenLocal") }
    sign publishing.publications.pluginMaven
}

license {
    header = rootProject.file("LICENSE")
    mapping("java", "SLASHSTAR_STYLE")
    mapping("groovy", "SLASHSTAR_STYLE")
    mapping("gdsl", "SLASHSTAR_STYLE")
    exclude("mockup/**")
    strictCheck(true)
}


