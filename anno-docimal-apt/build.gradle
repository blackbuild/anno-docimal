plugins {
    id 'java-library'
    id 'groovy'
    id 'signing'
    id 'com.github.hierynomus.license'
    id 'maven-publish'
}

description "Annotation Processor for AnnoDocimal"

group rootProject.group

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(11)
    }
    withJavadocJar()
    withSourcesJar()
}

dependencies {
    api project(':anno-docimal-annotations')
    compileOnly 'com.google.auto.service:auto-service-annotations:1.1.0'
    annotationProcessor 'com.google.auto.service:auto-service:1.1.0'

    testImplementation  "com.google.testing.compile:compile-testing:0.21.0"
    testImplementation "org.jetbrains:annotations:16.0.2"

    compileOnly "org.jetbrains:annotations:16.0.2"
    compileOnly "org.codehaus.groovy:groovy-all:2.4.21"
    //compileOnly "org.codehaus.groovy:groovy-all:3.0.21"

    //compileOnly "com.intellij:openapi:7.0.3"

    if (rootProject.ext.groovyVersion.startsWith("2.")) {
        testImplementation "org.codehaus.groovy:groovy-all:$rootProject.ext.groovyVersion"
        testImplementation("org.spockframework:spock-core:1.3-groovy-2.4")
    } else if (rootProject.ext.groovyVersion.startsWith("3.")) {
        testImplementation "org.codehaus.groovy:groovy-all:$rootProject.ext.groovyVersion"
        testImplementation("org.spockframework:spock-core:2.3-groovy-3.0")
        testImplementation("org.spockframework:spock-junit4:2.3-groovy-3.0")
    } else if (rootProject.ext.groovyVersion.startsWith("4.")) {
        testImplementation "org.apache.groovy:groovy-all:$rootProject.ext.groovyVersion"
        testImplementation("org.spockframework:spock-core:2.3-groovy-4.0")
        testImplementation("org.spockframework:spock-junit4:2.3-groovy-4.0")
    } else {
        throw new IllegalStateException("Unsupported Groovy version ${rootProject.ext.groovyVersion}")
    }

    testRuntimeOnly "net.bytebuddy:byte-buddy:1.9.3"
    testRuntimeOnly "org.objenesis:objenesis:2.6"

}
test {
    if (!rootProject.ext.groovyVersion.startsWith("2."))
        useJUnitPlatform()
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from(components.java)
            pom { pom ->
                rootProject.configurePom(pom, project)
            }
        }
    }
}

signing {
    required { gradle.taskGraph.hasTask("publish") || gradle.taskGraph.hasTask("publishToMavenLocal") }
    sign publishing.publications.mavenJava
}

license {
    header = rootProject.file("LICENSE")
    mapping("java", "SLASHSTAR_STYLE")
    mapping("groovy", "SLASHSTAR_STYLE")
    mapping("gdsl", "SLASHSTAR_STYLE")
    exclude("mockup/**")
    strictCheck(true)
}

